//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Normal"",
            ""id"": ""a6315b9f-be1c-4347-978f-11dd95d026ef"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""63e9e92b-7a6d-4eb7-9059-86b3b9337326"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""2d7866bc-754a-4227-b07a-2a97d748235f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""ad1c9c6c-529e-4e15-b635-bb9dbc0fe80f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""40bc79d9-9865-492f-8f5e-2912824efdc8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Defend"",
                    ""type"": ""Button"",
                    ""id"": ""7db056fb-5dbc-4285-a8fe-476994f9f4df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ee2db05d-97e5-47e1-9617-6ff7d3f9f0e0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""771f491a-43e6-4600-9990-0232d260e2f0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0cd19b5e-a979-4fab-9f59-d5d117bb549b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e0185807-4ae1-49d5-b825-e58b86e59480"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8af17964-d3a2-495f-bcec-e61a7cc1cc29"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3766847b-e6b7-44e1-8395-ed60ecd42fc0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5a38fe87-a69d-4ff4-b0a7-6a60acde30d0"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed3d1629-3fbd-48d7-ba12-fc8739ac8921"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f2e0efe-80fe-41a9-b74f-75b3b90c2b13"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Defend"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UXInput"",
            ""id"": ""b1c0b1de-fbb5-42fd-8cbb-0488de8c961d"",
            ""actions"": [
                {
                    ""name"": ""MenuIndexUp"",
                    ""type"": ""Button"",
                    ""id"": ""68a3ce32-e2af-4ed4-b7ef-9d044a404df5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MenuIndexDown"",
                    ""type"": ""Button"",
                    ""id"": ""95b8a4b1-d521-446d-84d5-02abba298855"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""ae66a47d-39c5-4bec-9068-f8f382156ebd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""bfc09a15-7a10-4421-96f3-01b19ddfa6f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""94105a60-0373-4d44-9b1a-db87182a1b52"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""MenuIndexUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aad43a86-037a-41f4-b216-f2a57b4b2a5c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""MenuIndexUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a0324915-7858-4cea-a189-abd466d75c7a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""MenuIndexDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07daafeb-da5d-4c67-8e72-f3bd36f8a530"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""MenuIndexDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8792423a-be61-43f0-811f-eef75aaf2f69"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c7fd4b3-d222-4f79-9026-d061a9b02e92"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a4687a6-50ed-4882-bca4-8a9e18c02a0a"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardAndMouse"",
            ""bindingGroup"": ""KeyboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Normal
        m_Normal = asset.FindActionMap("Normal", throwIfNotFound: true);
        m_Normal_Jump = m_Normal.FindAction("Jump", throwIfNotFound: true);
        m_Normal_Movement = m_Normal.FindAction("Movement", throwIfNotFound: true);
        m_Normal_Dash = m_Normal.FindAction("Dash", throwIfNotFound: true);
        m_Normal_Aim = m_Normal.FindAction("Aim", throwIfNotFound: true);
        m_Normal_Defend = m_Normal.FindAction("Defend", throwIfNotFound: true);
        // UXInput
        m_UXInput = asset.FindActionMap("UXInput", throwIfNotFound: true);
        m_UXInput_MenuIndexUp = m_UXInput.FindAction("MenuIndexUp", throwIfNotFound: true);
        m_UXInput_MenuIndexDown = m_UXInput.FindAction("MenuIndexDown", throwIfNotFound: true);
        m_UXInput_Back = m_UXInput.FindAction("Back", throwIfNotFound: true);
        m_UXInput_Enter = m_UXInput.FindAction("Enter", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Normal
    private readonly InputActionMap m_Normal;
    private List<INormalActions> m_NormalActionsCallbackInterfaces = new List<INormalActions>();
    private readonly InputAction m_Normal_Jump;
    private readonly InputAction m_Normal_Movement;
    private readonly InputAction m_Normal_Dash;
    private readonly InputAction m_Normal_Aim;
    private readonly InputAction m_Normal_Defend;
    public struct NormalActions
    {
        private @PlayerControls m_Wrapper;
        public NormalActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Normal_Jump;
        public InputAction @Movement => m_Wrapper.m_Normal_Movement;
        public InputAction @Dash => m_Wrapper.m_Normal_Dash;
        public InputAction @Aim => m_Wrapper.m_Normal_Aim;
        public InputAction @Defend => m_Wrapper.m_Normal_Defend;
        public InputActionMap Get() { return m_Wrapper.m_Normal; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NormalActions set) { return set.Get(); }
        public void AddCallbacks(INormalActions instance)
        {
            if (instance == null || m_Wrapper.m_NormalActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NormalActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @Defend.started += instance.OnDefend;
            @Defend.performed += instance.OnDefend;
            @Defend.canceled += instance.OnDefend;
        }

        private void UnregisterCallbacks(INormalActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @Defend.started -= instance.OnDefend;
            @Defend.performed -= instance.OnDefend;
            @Defend.canceled -= instance.OnDefend;
        }

        public void RemoveCallbacks(INormalActions instance)
        {
            if (m_Wrapper.m_NormalActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INormalActions instance)
        {
            foreach (var item in m_Wrapper.m_NormalActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NormalActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NormalActions @Normal => new NormalActions(this);

    // UXInput
    private readonly InputActionMap m_UXInput;
    private List<IUXInputActions> m_UXInputActionsCallbackInterfaces = new List<IUXInputActions>();
    private readonly InputAction m_UXInput_MenuIndexUp;
    private readonly InputAction m_UXInput_MenuIndexDown;
    private readonly InputAction m_UXInput_Back;
    private readonly InputAction m_UXInput_Enter;
    public struct UXInputActions
    {
        private @PlayerControls m_Wrapper;
        public UXInputActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MenuIndexUp => m_Wrapper.m_UXInput_MenuIndexUp;
        public InputAction @MenuIndexDown => m_Wrapper.m_UXInput_MenuIndexDown;
        public InputAction @Back => m_Wrapper.m_UXInput_Back;
        public InputAction @Enter => m_Wrapper.m_UXInput_Enter;
        public InputActionMap Get() { return m_Wrapper.m_UXInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UXInputActions set) { return set.Get(); }
        public void AddCallbacks(IUXInputActions instance)
        {
            if (instance == null || m_Wrapper.m_UXInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UXInputActionsCallbackInterfaces.Add(instance);
            @MenuIndexUp.started += instance.OnMenuIndexUp;
            @MenuIndexUp.performed += instance.OnMenuIndexUp;
            @MenuIndexUp.canceled += instance.OnMenuIndexUp;
            @MenuIndexDown.started += instance.OnMenuIndexDown;
            @MenuIndexDown.performed += instance.OnMenuIndexDown;
            @MenuIndexDown.canceled += instance.OnMenuIndexDown;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
            @Enter.started += instance.OnEnter;
            @Enter.performed += instance.OnEnter;
            @Enter.canceled += instance.OnEnter;
        }

        private void UnregisterCallbacks(IUXInputActions instance)
        {
            @MenuIndexUp.started -= instance.OnMenuIndexUp;
            @MenuIndexUp.performed -= instance.OnMenuIndexUp;
            @MenuIndexUp.canceled -= instance.OnMenuIndexUp;
            @MenuIndexDown.started -= instance.OnMenuIndexDown;
            @MenuIndexDown.performed -= instance.OnMenuIndexDown;
            @MenuIndexDown.canceled -= instance.OnMenuIndexDown;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
            @Enter.started -= instance.OnEnter;
            @Enter.performed -= instance.OnEnter;
            @Enter.canceled -= instance.OnEnter;
        }

        public void RemoveCallbacks(IUXInputActions instance)
        {
            if (m_Wrapper.m_UXInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUXInputActions instance)
        {
            foreach (var item in m_Wrapper.m_UXInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UXInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UXInputActions @UXInput => new UXInputActions(this);
    private int m_KeyboardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyboardAndMouseScheme
    {
        get
        {
            if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardAndMouse");
            return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
        }
    }
    public interface INormalActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnDefend(InputAction.CallbackContext context);
    }
    public interface IUXInputActions
    {
        void OnMenuIndexUp(InputAction.CallbackContext context);
        void OnMenuIndexDown(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
        void OnEnter(InputAction.CallbackContext context);
    }
}
